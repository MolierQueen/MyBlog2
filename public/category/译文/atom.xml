<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://oliverqueen.cn</id>
    <title>Molier • Posts by &#34;译文&#34; category</title>
    <link href="https://oliverqueen.cn" />
    <updated>2018-05-08T02:12:00.000Z</updated>
    <category term="欢迎页" />
    <category term="网络" />
    <category term="底层" />
    <category term="DNS解析" />
    <category term="LocalDNS" />
    <category term="OpenGL" />
    <category term="UI" />
    <category term="动画" />
    <category term="性能优化" />
    <category term="xcode" />
    <category term="cocoapods" />
    <category term="podfile" />
    <category term="webview" />
    <category term="hook" />
    <category term="runtime" />
    <category term="翻译" />
    <category term="优化" />
    <category term="国外文献" />
    <category term="httpdns" />
    <category term="Cocoapods" />
    <category term="架构" />
    <category term="AlertView" />
    <category term="Hook" />
    <category term="杂谈" />
    <category term="Hexo" />
    <category term="个人博客" />
    <category term="网站" />
    <category term="屏幕适配" />
    <category term="iOS 11" />
    <category term="评论插件" />
    <category term="总结" />
    <category term="回味2017展望2018" />
    <category term="热修复" />
    <category term="JSPath" />
    <category term="swift" />
    <category term="网络请求" />
    <category term="Swift" />
    <category term="音频" />
    <category term="唱吧" />
    <category term="K歌" />
    <category term="AVFoundation" />
    <category term="git" />
    <category term="效率工作" />
    <category term="代码版本控制" />
    <category term="iOS" />
    <category term="Crash防护" />
    <category term="Apple登录" />
    <category term="WWDC2022" />
    <category term="算法" />
    <category term="C语言" />
    <category term="排序" />
    <entry>
        <id>https://oliverqueen.cn/2018-05-08-RX-Swift-Study-One/</id>
        <title>关于RxSwift的一点理解</title>
        <link rel="alternate" href="https://oliverqueen.cn/2018-05-08-RX-Swift-Study-One/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h2 id=&#34;hello-rxswift&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hello-rxswift&#34;&gt;#&lt;/a&gt; Hello RxSwift!&lt;/h2&gt;
&lt;p&gt;这本书可以让你用 Swift 来编写响应式编程代码。但是到底什么是 RxSwift, 这里有很好的定义：&lt;/p&gt;
&lt;p&gt;&amp;lt;font color=orange&amp;gt;RxSwift 是由可被观察的事件的异步队列和可操作的功能性的运算符组成的库，并且他可以由调度者通过参数的方式进行调度。&amp;lt;/font&amp;gt; &amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1525870736284&amp;amp;di=9f373001bac8687d5fe11b3d7b40016f&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fcode4app.com%2Fdata%2Fattachment%2Fforum%2F201703%2F21%2F210007p6wy7buzq6hqhhdu.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;听起来很复杂？其实不用担心，因为无论是你编写响应式编程，还是理解他们背后的思想和一些相关的东西，官方通常都是用一些很吓人的术语来解释。尤其是当你第一次接触，或者是之前从未有人向你介绍过这些的时候，你就会觉得很可怕。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本书的目标就是带你逐步的去理解 RxSwift 的 API，并且去运用每一个 API，然后把它们运用到实际的 iOSApp 中。&lt;/p&gt;
&lt;p&gt;你将会从 RxSwift 中最基本的功能开始，然后循序渐进的由中级到高级。花一些时间去广泛的理解里面的概念，这样以来读完本书后你就会精通 RxSwift 额思想和使用。其实 Rx 是非常广的话题，以至于不能单单通过这一本书来讲完，因此我们通过这本书让你对 RX 有一个坚实的了解，这样你就能继续提高自己的 Rx 水平了&lt;/p&gt;
&lt;p&gt;其实我们并没有非常确信 RxSwift 的思想是什么，让我们在这个章节里面通过几个简单的例子来帮助我们理解响应式编程。&lt;/p&gt;
&lt;p&gt;&amp;lt;font color=orange&amp;gt;RxSwift 本质其实就是当你的数据或者对象发生变化时候他会把这个变化放在一个单独的管道 (队列) 里面，以此来达到简化异步并发的过程的目的 &amp;lt;/font&amp;gt;&amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;这里打个比方一个按钮我点击了就会触发一个时间 那么我每点击一次就会生成一个 Action 我们用一个管道去装在这些 Action，每加一个 Action 就会把他放管道里面，我们可以理解为管道里面流动的 Actions，且管道与管道之间相互独立。同理我们可以吧 Button 改成一个 UITExtField，Action 就是每一次输入事件。&lt;/p&gt;
&lt;p&gt;作为一个 iOS 的开发者我相信这已经很好帮你去理解什么是 RxSwift 了吧，这应该是比你在一开始看到的那些专业术语好理解的多。&lt;/p&gt;
&lt;p&gt;如果你还是不清楚，那么你至少应该理解，RxSwift 可以很轻松的帮你编写异步操作的代码，你要知道编写异步操作的代码是比较难的，所以所任何一点点的帮助都是受大家所欢迎的。&lt;/p&gt;
&lt;h3 id=&#34;异步编程的介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步编程的介绍&#34;&gt;#&lt;/a&gt; 异步编程的介绍&lt;/h3&gt;
&lt;p&gt;如果你想用一种通俗简单的语言来描述异步编程，比如你在做一个 iSO 的 App，那么你一定想到如下几个东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;接受 Button 的点击事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 text field 的 Action 和键盘的弹出和收起动画之间的关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从网上下载大图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;往硬盘里面存数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;播放视频&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的所有东西看似是发生在同一时刻其实真的是吗？我们思考一个问题：比如你在看视频，这时候你点击了 textfield 弹出键盘，大家都知道键盘由下往上弹出是有一个动画的，就算键盘已经出现到了屏幕上，只要动画没有做完你的视频就不会暂停，真的是这样吗，内部又是如何实现的？如下图:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wx3.sinaimg.cn/large/006tKfTcgy1fr41y6xhkij31kw0q0h80.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;程序里面不同的部分不会阻塞彼此的执行，iOS 提供了几种 API，通过多核 CPU 来在不同的线程上进行不同的工作。&lt;/p&gt;
&lt;p&gt;其实编写真正并行的代码其实是很复杂的，打个比方假如两个线程同时访问同一个资源，就会产生资源争夺的问题，比如谁先访问，谁后访问。&lt;/p&gt;
&lt;h3 id=&#34;uikit中的一些异步的api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#uikit中的一些异步的api&#34;&gt;#&lt;/a&gt; UIKit 中的一些异步的 API&lt;/h3&gt;
&lt;p&gt;苹果在 iOS SDK 中提供了很多 api，帮助你编写异步代码。你在你的项目中使用过这些但是可能还没有考虑过它们，因为它们是编写移动应用程序的基础。毕竟苹果爸爸封装好的，我们拿来用就好了，干嘛想那么多。&lt;/p&gt;
&lt;p&gt;你一定用过以下几点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NotificationCenter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delegate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grand Central Dispatch(GCD)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Closures（Block）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于大部分的类都是异步的，并且 UI 在内部也是异步的，所以很难去猜测整个程序的执行顺序，因此你的 APp 会因为一些外部的原因而表现不同，比如用户的输入不同、网络环境的不同、或者一些其他的东西。用户每次在打开你的 APp 其实代码的执行顺序都是不同的 (当然除了一些自动化测试的场景，那些条件都是预先设置好的。)&lt;/p&gt;
&lt;p&gt;其实写好异步代码并不是绝对不可能的，毕竟苹果给我提供了非常强大的 API，相比较于其他平台这要好很多。不过问题在于编写复杂的异步代码很难，部分原因是因为苹果给我们提供了大量的 SDK，而且他们并不统一。如果使用 delegate 我们需要遵循特制的格式，block，NotificationCenter 等等都是这样的，所以并没有一种通用的、贯穿所有异步方法的 API，这样就导致读懂并且书写这样的异步代码很难。可以看下下图:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wx3.sinaimg.cn/large/006tKfTcgy1fr4342v718j31kw0nlgzj.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们来比较两个代码片段来总结下这章。一个是异步一个是同步。&lt;/p&gt;
&lt;h4 id=&#34;同步代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步代码&#34;&gt;#&lt;/a&gt; 同步代码&lt;/h4&gt;
&lt;p&gt;对数组的每个元素进行操作你应该很熟悉了吧，其实就是循环遍历嘛。这是一个非常简单而又坚实的功能，因为它保证了两件事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;它是同步执行的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在循环遍历时候他是不可变的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;花点时间想想这意味着什么。当你遍历一个数组的时候，你不需要检查所有的元素是否仍然存在，并且您不需要重新返回，以防另一个线程在集合的开始插入一个元素。您假定您总是在循环的开始时遍历整个集合。试试以下代码:&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight smali&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var&lt;span class=&#34;built_in&#34;&gt; array &lt;/span&gt;= [1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for number in&lt;span class=&#34;built_in&#34;&gt; array &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  print(number)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt; array &lt;/span&gt;= [4, 5, 6]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(array)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 最后的输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wx3.sinaimg.cn/large/006tKfTcgy1fr43rz56omj304p02at8i.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数组在 for 循环中是不可变的吗？执行顺序是什么？&lt;/p&gt;
&lt;h4 id=&#34;异步代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步代码&#34;&gt;#&lt;/a&gt; 异步代码&lt;/h4&gt;
&lt;p&gt;再考虑一个类似的代码，如下用户通过点击事件触发下面代码，每次点击都会输出数组下一个元素，然后用户重复点击直到把数组所有的元素输出完成：&lt;br /&gt;
&lt;figure class=&#34;highlight smali&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;var&lt;span class=&#34;built_in&#34;&gt; array &lt;/span&gt;= [1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;var currentIndex = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//this method is connected in IB to a button&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@IBAction func printNext(_ sender: Any) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  print(array[currentIndex])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt; if &lt;/span&gt;currentIndex != array.count-1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    currentIndex += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 试想一下如果放在我们现实的 App 中真的可以这么执行吗？这个可说不准，因为如果在用户的两次点击之间又有其他的线程对这个数组进行了操作 (增加、删除元素) 那么数据就会发生错乱。而且如果 currentIndex 被另一个线程改变了那么你也不会得到预期的结果。&lt;/p&gt;
&lt;p&gt;其实多线程最重要的就是数据争夺的问题，然而 RxSwift 很好的解决了这个问题&lt;/p&gt;
</content>
        <category term="Swift" />
        <updated>2018-05-08T02:12:00.000Z</updated>
    </entry>
    <entry>
        <id>https://oliverqueen.cn/2018-01-24-iOS%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</id>
        <title>iOS端自动内存泄漏检测工具</title>
        <link rel="alternate" href="https://oliverqueen.cn/2018-01-24-iOS%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;/assets/css/APlayer.min.css&#34;&gt;&lt;script src=&#34;/assets/js/APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;h4 id=&#34;产生的背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#产生的背景&#34;&gt;#&lt;/a&gt; 产生的背景&lt;/h4&gt;
&lt;p&gt;在移动设备上内存是一块公用的区域，如果一个 App 没有做好内存管理那么一定会导致性能急剧下降甚至会崩溃。&lt;br /&gt;
Facebook 的 iOS 端有许多的地方都共享着一块内存，如果任何一个地方占用太多的内存的话就会影响到整个 App，比如一个地发生了内存泄漏，就会出现这种情况。我们把一组内存分配我们的一个对象，但是当我们使用完之后忘记释放他，这就通常就会引起内存泄漏，这就意味着系统永远不能回收这块内存也就导致这块内存一直不能分配给别的对象。在 Facebook 里我们有许多许多的工程师在代码的不同部分工作，内存泄漏时不可避免的，当一旦有内存泄漏发生我们就需要立即找到并且修复。虽然现在有好多检测内存泄漏的工具但是这些工具并不完善，他们仍然需要开发者去做一些工作：&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1：打开 Xcode 并且 Build&lt;/li&gt;
&lt;li&gt;2：运行 instrument&lt;/li&gt;
&lt;li&gt;3：使用 App 尽可能的去复现&lt;/li&gt;
&lt;li&gt;4：寻找内存泄漏的来源&lt;/li&gt;
&lt;li&gt;5：解决问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这意味着需要大量的体力活，并且都是些重复无聊的工作，这也导致了我们不能在开发周期就定位并且修复问题。&lt;/p&gt;
&lt;p&gt;将这个过程自动化可以让我们在不需要太多的开发者的情况下更快的去找到内存泄漏。为了解决这个问题我们已经建立一套工具使我们能够自动的去完成这些过程，并且这套工具已经解决了我们自己代码的一些问题，今天我们很激动的宣布我们把他们发布了出来&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL0ZCUmV0YWluQ3ljbGVEZXRlY3Rvcg==&#34;&gt; FBRetainCycleDetector&lt;/span&gt;, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL0ZCQWxsb2NhdGlvblRyYWNrZXI=&#34;&gt;FBAllocationTracker&lt;/span&gt;, and &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL0ZCTWVtb3J5UHJvZmlsZXI=&#34;&gt;FBMemoryProfiler&lt;/span&gt;.&lt;/p&gt;
&lt;h4 id=&#34;循环引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环引用&#34;&gt;#&lt;/a&gt; 循环引用&lt;/h4&gt;
&lt;p&gt;Objective-C 使用引用计数来管理内存的，内存中的一个对象可以引用其他的对象，只要有一个对象使用它，那么他就会一直被留在内存中。我们也可以说一个对象持有另一个对象。&lt;/p&gt;
&lt;p&gt;  一般来说这都没问题。但是有一种情会使我们陷入僵局。当两个 obj 不在相互持有，而是通过另一个 obj 来互相持有，这样就会陷入一个循环引用的状态就像下面这张图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wx1.sinaimg.cn/large/006tNc79gy1fnrkogrtqbj30kg0cndhd.jpg&#34; alt=&#34;循环引用&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一个 View Controller 持有一个 Viw View 中持有 delegate delegate 中持有 ViewController。这样就形成一个环状，谁也无法释放。&lt;/p&gt;
&lt;p&gt;  循环引用会导致一些列的的问题，如果一个对象在 RAM 中无限的占用空间，充其量也只是浪费一点点内存。如果这些泄漏的对象正在做一些其他的事情那么就会导致 App 的其他的地方再也无法使用这块内存。更严重的如果循环引用过多，就会浪费掉大量的内存最终导致程序的 crash。&lt;/p&gt;
&lt;p&gt;  在我们进行人工调试的时候我们已经找出了大量的很明显的循环引用，我们能很好地定位他，但是在运行之后我们就很难发现他们，但是我们这 SDK 能很轻松的做这些事。&lt;/p&gt;
&lt;h4 id=&#34;在runtime下的循环引用检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在runtime下的循环引用检测&#34;&gt;#&lt;/a&gt; 在 Runtime 下的循环引用检测&lt;/h4&gt;
&lt;p&gt;  在 OC 中找循环引用其实就类似于在一个节点为对象，链接线为引用关系的有向无环图中寻找一个环。打个比方如果 A 引用 B 那么 A 到 B 就会有箭头指向可以看这个&lt;br /&gt;
&lt;img data-src=&#34;https://wx4.sinaimg.cn/large/006tNc79gy1fo6kvv1735j30yg0mv0ug.jpg&#34; alt=&#34;image.png&#34; /&gt; 我们发现这张图在箭头处发生循环引用&lt;/p&gt;
&lt;p&gt;  这个是一个很简单的引用关系我们必须确保我们能像左侧那样的来引用对象，其实对于每一个对象我们都获取他所有引用 (持有的) 对象，有的是强引用有的是弱引用，但是循环引用只发生在强引用上，对于每个对象我们需要搞清楚如何找到引用关系。&lt;/p&gt;
&lt;p&gt;  幸运的是 OC 给我提供了强大的 Runtime，这足够让我们去挖掘其中的关系，图中的一个点可能是 block 或者是 Object 中的其中一个，让我们来分别讨论下&lt;/p&gt;
&lt;h4 id=&#34;objects&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#objects&#34;&gt;#&lt;/a&gt; Objects&lt;/h4&gt;
&lt;p&gt;  Runtime 中有很多工具去帮助我们了解其中的东西，首先我们搞懂到所有实例变量的引用关系&lt;br /&gt;
 &lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const &lt;span class=&#34;built_in&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getIvarLayout(Class &lt;span class=&#34;params&#34;&gt;cls&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const &lt;span class=&#34;built_in&#34;&gt;char&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;constructor&#34;&gt;_getWeakIvarLayout(Class &lt;span class=&#34;params&#34;&gt;cls&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 对于一个给定的对象，实例变量布局图告诉我们了他都引用了哪些对象，他会给我提供一个索引，这个索引相当于一个偏移量，该对象加上这个偏移量就是他所引用的对象的地址。运行时会给我们提供一个 “弱引用” 的布局图，也就是该对象所有弱引用的对象，强引用和弱引用之间的区别我们可以猜想为就是强引用的布局图。&lt;/p&gt;
&lt;p&gt;  对于 objective-c++ 来说我们可以用结构体来定义一个对象，这些对象不会再实例变量的布局图中被获取到，不过 Runtime 给我提供了 “类型编码” 来处理这个问题，对于每个实例变量，类型编码描述了变量是如何构造的。如果它是一个 struct，类型编码可以描述出它包含的字段和类型。我们解析类型编码以找到哪些实例变量是 objective-c 的对象。然后我们可以像在布局图中那样计算他的偏移量然后拿到他所引用的对象的地址。&lt;/p&gt;
&lt;p&gt;  还有一些我们不会深入讨论的边缘案例。这些都是不同的集合，我们必须列举它们来获取它们的保留对象，这可能会产生一些副作用。&lt;/p&gt;
&lt;h4 id=&#34;blocks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blocks&#34;&gt;#&lt;/a&gt; Blocks&lt;/h4&gt;
&lt;p&gt;  block 和对象有一点不同。运行时不允许我们轻松地查看它们的布局，但是我们仍然可以进行猜测。在处理 block 时，我们使用了 Mike Ash 在他的项目&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21pa2Vhc2gvQ2lyY2xl&#34;&gt; Circle&lt;/span&gt; 中提出的想法：也正是这个项目激发 FBRetainCycleDetector 的项目。&lt;/p&gt;
&lt;p&gt; $emsp; 我们可以使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NsYW5nLmxsdm0ub3JnL2RvY3MvQmxvY2stQUJJLUFwcGxlLmh0bWw=&#34;&gt; application binary interface for blocks&lt;/span&gt; (ABI)，他可以向我们展示一个 block 在内存中是什么样子的，如果我们知道了我们所研究的 block 的表现形式我们就可以用一个假的结构体来模仿实现 block 的功能，之后我们就能知道了哪些对象被 block 引用并且一直在那里，但是不幸的是我们并不知道这些事强引用还是弱引用。&lt;/p&gt;
&lt;p&gt;  为了做到这些我们使用黑盒的方法，首先我们创建一个假的对象来模仿我们所研究的 Block，因为是我们自己创建的假对象，所以我们可以完全的操作他，我们给这个假装的 block 上面装上释放探测器，释放探测器是监听发给他们的释放消息的一个对象，如果一个所有者想放弃对对象们所有权的时候，释放探测器会给他所有强引用的对象发出消息，当我们释放我们的假对象时，我们可以检查哪些探测器收到了这样的消息。便知道了哪些 block 是被强引用的。这样一来我们可以找到我们原始 block 所持有的真是的对象，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wx2.sinaimg.cn/large/006tNc79gy1fnrkpskc4zj30kg0fd76k.jpg&#34; alt=&#34;block&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;自动化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自动化&#34;&gt;#&lt;/a&gt; 自动化&lt;/h4&gt;
&lt;p&gt;  员工在进行持续执行时，这个工具就会非常出色。自动化在客户端上是非常容易的，我们使用定时器来建立一个循环引用检测，用来周期性的扫描一部分内存去寻找循环引用，不过还是有点问题，我们第一次运行检测器的时候我们发现他不快速的扫描完整个内存空间，所以我们需要给他提供一个候选检测对象，为了做到这一点，我们建立了 FBAllocationTracker，他可以追踪任何一个 Nsobject 对象的创建和销毁，他同样可以在任何给定的时刻以最小的性能开销来获取任何类的实例对象。&lt;/p&gt;
&lt;p&gt;  在客户端上实现了这样的自动化操作意味着我们可以更加简单的在 NSTimer 上使用 FBRetainCycleDetector 和添加用了追踪实例的 FBAllocationTracker，现在让我们来看下后端到底发生了什么，循环引用可以有多个对象来组成，如果创建了许多的引用环并且有一个泄漏了那么事情将会变得非常复杂。如下如所示 A-&amp;gt;B 就是一个坏的引用环导致了 A-&amp;gt;B-&amp;gt;C-&amp;gt;D 和 A-&amp;gt;B-&amp;gt;C-&amp;gt;E&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wx2.sinaimg.cn/large/006tNc79gy1fnrkrd6o9oj30kg0j6acn.jpg&#34; alt=&#34;引用环&#34; /&gt;&lt;/p&gt;
&lt;p&gt;遇到这样的问题就会给我们的 SDK 带来两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果这两个环是由于一个不良引用引起我们就直接标记一处不良引用就可以了，不用标记两处，这样会给开发者一个错误信号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果这两个环是虽然由一个不良引用引起但是会导致两个不同的错误，那么我们就需要将这个两个循环引用都标记出来&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我们需要建立一个循环引用群，我们通过下面这些启发写了一种算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1：把给定日期中所检测出的所有循环引用收集起来。&lt;/li&gt;
&lt;li&gt;2：找到每个循环引用环中 Facebook 特定的类名。&lt;/li&gt;
&lt;li&gt;3：找到每个环中最小的那个环。&lt;/li&gt;
&lt;li&gt;4：把最小周期放到一个组中。&lt;/li&gt;
&lt;li&gt;5：仅仅只像开发者报告最小的周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了这些最后一部分就是找出谁可能会意外的引入一个循环引用，我们通过 “git/hg blame” 来做到这些。猜测这可能是导致出现问题的最新修改。最后一个提交代码的人会收到一个通知。整个系统可以如下展示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wx3.sinaimg.cn/large/006tNc79gy1fnrkrs9hmvj30kg0660ua.jpg&#34; alt=&#34;系统图&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;手工配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手工配置&#34;&gt;#&lt;/a&gt; 手工配置&lt;/h4&gt;
&lt;p&gt;  尽管自动化帮助简化了寻找循环引用的过程，并减少了开发人员的工作，但是手动配置仍然很重呀。我们开发的另一款工具允许任何人查看应用程序的内存使用情况，甚至不用将手机插入电脑。FBMemoryProfiler 可以很容易地添加到任何应用中，让你手动配置你的工程，并在应用中运行循环引用检测，它可以通过使用 FBAllocationTracker 和 fbretaincycle 检测器来完成。&lt;/p&gt;
&lt;p&gt;原文链接 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb2RlLmZhY2Vib29rLmNvbS9wb3N0cy81ODM5NDYzMTUwOTQzNDcvYXV0b21hdGljLW1lbW9yeS1sZWFrLWRldGVjdGlvbi1vbi1pb3Mv&#34;&gt;https://code.facebook.com/posts/583946315094347/automatic-memory-leak-detection-on-ios/&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="翻译" />
        <category term="优化" />
        <category term="国外文献" />
        <updated>2018-01-24T03:41:50.000Z</updated>
    </entry>
</feed>
